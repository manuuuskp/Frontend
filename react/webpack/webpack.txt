const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const CopyPlugin = require("copy-webpack-plugin");
const { BundleAnalyzerPlugin } = require("webpack-bundle-analyzer");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const { PurgeCSSPlugin } = require("purgecss-webpack-plugin");
const glob = require("glob");
const webpack = require("webpack");


const purgePath = {
  src : path.join(__dirname, "src")
}

module.exports = {
  entry: {
    index: "./src/index.js",
    courses: "./src/pages/courses.js",
  },
  output: {
    filename: "[name].[contenthash].js",
    path: path.resolve(__dirname, "dist"),
    clean: true,
  },
  devtool: "inline-source-map",
  devtool: "source-map" //Production code
  devServer: {
    static: "./dist",
  },
  module: {
    rules: [
      {
        test: /\.css$/,
        use: [MiniCssExtractPlugin.loader, "css-loader"],
      },
      {
        test: /\.s[ac]ss$/,
        use: [MiniCssExtractPlugin.loader, "css-loader", "sass-loader"],
      },
      {
        test: /\.(png|jpeg|jpg|gif)$/,
        type: "asset/resource",
      },
    ],
  },
  plugins: [
    webpack.ProvidePlugin({
      
    }),
    new HtmlWebpackPlugin({
      template: "./src/index.html",
      chunks: ["index"],
      filename: "index.html",
    }),
    new HtmlWebpackPlugin({
      template: "./src/pages/courses.html",
      chunks: ["courses"],
      filename: "courses.html",
      base: "pages",
    }),
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, "src/assets/images/*"),
          to: path.resolve(__dirname, "dist"),
          context: "src",
        },
      ],
    }),
    new PurgeCSSPlugin({
      paths: glob.sync(`${purgePath.src}/**/*`,  { nodir: true }),
    }),
    // new BundleAnalyzerPlugin({}),
    new MiniCssExtractPlugin({}),
    
  ],
  optimization: {
    moduleIds: 'deterministic',
    runtimeChunk: 'single',
    splitChunks: {
      chunks: "all",
      cacheGroups: {
         vendor: {
           test: /[\\/]node_modules[\\/]/,
           name: 'vendors',
           chunks: 'all',
         },
       },
    },
  },
};


CODE SPLITTING:
==================
MiniCssExtractPlugin - is used to extract css into seperate files. It creates CSS file per JS file which contains CSS in it.

optimization: {
  splitChunks: {
    chunks: all
  }
}
This is to split the common modules into separate chunks.

===========================
we can also prefetch and preload modules when importing.

import(/* webpackPrefetch: true webpackChunkName: 'chunkName' */ "../somepath/somefile");

This would have created -- <link rel="prefetch" href="login-modal-chunk.js">

This is how you preLoad.
import(/* webpackPreload: true */ 'ChartingLibrary');

CASHING:
============
can be done using content hash in the output object by substitution string

output: {
  filename: [name].[contenthash].bundle.js
}

we can also use the optimization object.

optimization: {
  runtimeChunk: 'single',
  splitChunks: {
    cacheGroup: {
      vendor: {
        test: ,
        name: 'vendor',
        chunks: 'all'
      }
    }
  }
}

TREE SHAKING:
==================
use ES6 module - import and export
use "sideeffects": false in package.json to tell compiler that is it side effect free and unsed import can be removed
set mode - production which gives us tree shaking and minification


PRODUCTION:
================
setting mode: production will do all the things in webpack.
It does minification by TerserPlugin.

use - css-minimizer-webpack-plugin. to minimize the bundle size of css in production.
optimization: {
  minimizer: [
    new CssMinimizerPlugin()
  ]
}
